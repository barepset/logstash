filter {
  if [logtype] {
    mutate {
      add_field => { "type" => "%{logtype}" }
    }
  } else if [type] == "general" or [type] == "logspout" or [type] == "json" {
    json {
      source => "message"
    }
  } else if [message] =~ /^{.*}/  {
    json {
      source => "message"
    }
  } else if [message] =~ "loggregator" {
	grok {
	  match => { "message" => "(?:%{INT} )?<%{POSINT:syslog_pri}>(?:%{NONNEGINT:syslog5424_ver} )?(?:%{SYSLOGTIMESTAMP:syslog_timestamp}|%{TIMESTAMP_ISO8601:syslog_timestamp}) %{DATA:syslog_program} %{DATA:syslog_hostname} \[%{DATA:syslog_sd_params}\] - - %{GREEDYDATA:syslog_message}" }
	  add_tag => [ "syslog" ]
	  tag_on_failure => ["fail/syslog/_grokparsefailure"]
	}

	if !("fail/syslog_standard/_grokparsefailure" in [tags]) {
	    syslog_pri { }

	    date {
	        match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
	        timezone => "UTC"
	        remove_field => "syslog_timestamp"
	    }

	    #Bundle all the syslog data into a syslog object
	    mutate {
	        rename => { "syslog_pri" => "[syslog][pri]" }
	        rename => { "syslog5424_ver" => "[syslog][5424_ver]" }
	        rename => { "syslog_sd_params" => "[syslog][sd_params]" }
	        rename => { "syslog_program" => "[syslog][program]" }
	        rename => { "syslog_hostname" => "[syslog][hostname]" }
	        rename => { "syslog_message" => "[syslog][message]" }
	        rename => { "syslog_severity_code" => "[syslog][severity_code]" }
	        rename => { "syslog_facility_code" => "[syslog][facility_code]" }
	        rename => { "syslog_facility" => "[syslog][facility]" }
	        rename => { "syslog_severity" => "[syslog][severity]" }
	    }

	}

	if [syslog][message] =~ ".*---.*" {
	    grok {
	        match => {
	            '[syslog][message]' => '%{TIMESTAMP_ISO8601:[spring][logtime]}%{SPACE}%{LOGLEVEL:[spring][loglevel]}%{SPACE}%{NUMBER:[spring][pid]}%{SPACE}---%{SPACE}\[%{SPACE}%{DATA:[spring][threadname]}\]%{SPACE}%{NOTSPACE:[spring][classname]}%{SPACE}:%{SPACE}%{GREEDYDATA:[spring][logmessage]}'
	        }
	        tag_on_failure => [ 'fail/spring' ]
	        add_tag => [ 'spring' ]
	    }

	    if "spring" in [tags] {

	        date {
	            match => [ "[spring][logtime]", "ISO8601" ]
	            timezone => "UTC"
	        }

	        if [spring][logmessage] =~ /^\{/ {
	            json {
	                source => "[spring][logmessage]"
	                target => "[spring][logdata]"
	                add_tag => "spring/json/auto_detect"
	            }
	        }

	        #Drop duplicated data
	        mutate {
	           remove_field => [ "[syslog][message]", "[spring][logmessage]" ]
	        }
	    }
	}
  } else if [type] == "syslog" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    syslog_pri { }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  } else if [type] == "heroku" or [type] == "appharbor" {
    split {}
    grok {
     match => {
        "message" => "%{SYSLOG5424PRI}%{NONNEGINT:syslog5424_ver} +(?:%{TIMESTAMP_ISO8601:timestamp}|-) +(?:%{HOSTNAME:logplex_host}|-) +(?:%{WORD:logplex_source}|-) +(?:%{DATA:logplex_dyno}|-) +(-) +%{GREEDYDATA:logplex_message}"
      }
    }
    kv {
      source => "logplex_message"
      prefix => "msg_"
      include_keys => [ "at", "method", "path", "host", "request_id", "fwd", "dyno", "connect", "service", "status", "bytes", "source", "id", "wait", "timeout", "state" ]
    }
    syslog_pri { syslog_pri_field_name => "syslog5424_pri" }
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
    mutate {
      remove_field => [ "timestamp", "message" ]
    }
  } else if [type] == "iis" {
    grok {
      match => ["message", "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:s-sitename} %{IPORHOST:s-computername} %{IPORHOST:s-ip} %{NOTSPACE:cs-method} %{URIPATH:cs-uri-stem} (%{NOTSPACE:cs-uri-query}|-) %{NUMBER:s-port:int} (%{NOTSPACE:cs-username}|-) (%{IPORHOST:c-ip}|-) (%{NOTSPACE:cs-version}|-) (%{NOTSPACE:agent}|-) (%{NOTSPACE:referrer}|-) %{NOTSPACE:cs-host} %{NUMBER:sc-status:int} %{NUMBER:sc-substatus:int} %{NUMBER:sc-win32-status:int} %{NUMBER:sc-bytes:int} %{NUMBER:cs-bytes:int} %{NUMBER:time-taken:int}"]
    }
    
    if ! ("_grokparsefailure" in [tags]) {
      date {
        match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
        target => "@timestamp"
      }
      
      if [agent] {
        useragent {
          source => "agent"
          target => "useragent"
        }
      }
      
      if [c-ip]  {
        geoip {
          source => "c-ip"
          target => "geoip"

        }
      }

      mutate {
        gsub => [
          # replace any double quotes
          "agent", "\"", "",
          "referrer", "\"", "",
          "request", "[-]", "",
          "username", "[-]", "",
          "referrer", "[-]", ""
        ]
      }
      
      mutate {
        convert => ["useragent[minor]","integer"]
        convert => ["useragent[major]","integer"]
        convert => ["useragent[patch]","integer"]
        convert => [ "cs_bytes", "integer" ]
        convert => [ "s_port", "integer" ]
        convert => [ "sc_bytes", "integer" ]
        convert => [ "sc_status", "integer" ]
        convert => [ "sc_substatus", "integer" ]
        convert => [ "sc_win32_status", "integer" ]
        convert => [ "time_taken", "integer" ]
      }
    }
  } else if [type] == "eventlog" {
    date {
      match => [ "TimeGeneratedUTC", "ISO8601" ]
      target => "@timestamp"
    }
  } else if [type] == "log4net" {
    date {
      match => [ "d", "ISO8601" ]
      target => "@timestamp"
    }
    mutate {
      remove_field => [ "d" ]
    }
    grok {
      match => { "message" => "%{USERNAME:hostname} %{GREEDYDATA:log4net_message}" }
    }
    mutate {
      replace => [ "message", "%{log4net_message}" ]
      remove_field => [ "log4net_message" ]
    }
  } else if [type] == "nginx-access" {
   grok {
      patterns_dir => '/cusdata/patterns'
      match => { "message" => "%{NGINXACCESS}" }
   }
   date {
     match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
   }
   geoip {
     source => "clientip"
   }
  } else if [type] == "javascript" {
    date {
      match => [ "[javascript][timestamp]", "ISO8601" ]
      target => "@timestamp"
    }
    mutate {
      remove_field => [ "[javascript][timestamp]" ]
    }
  } else if [type] == "node" {
    date {
      match => [ "[node][timestamp]", "ISO8601" ]
      target => "@timestamp"
    }
    mutate {
      remove_field => [ "[node][timestamp]" ]
    }
  } else if [type] =="apache-access"{
    grok {
      patterns_dir => '/cusdata/patterns'
      match => { "message" => "%{COMBINEDAPACHELOG}" }
    }
    date {
     match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
  }
}

